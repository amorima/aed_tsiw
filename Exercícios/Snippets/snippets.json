[
    {
        "created": "2024-11-27T22:07:12.115Z",
        "name": "Contador de caracteres espaços e vogais",
        "tags": [
            "contador",
            "espaços",
            "vogais",
            "caracteres",
            "count",
            "len"
        ],
        "content": "def count_text (texto):\r\n    \"\"\"Recebe um texto e imprime o número de caracteres, espaços e vogais.\r\n\r\n    Args:\r\n        texto (str): texto em que vão ser contados os caracteres, espaços e vogais\r\n    \"\"\"\r\n    texto=texto.lower()\r\n    print(\"Número de Caracteres: \", len(texto))\r\n    print(\"Número de vogais: \", (texto.count(\"a\")+texto.count(\"e\")+texto.count(\"i\")+texto.count(\"o\")+texto.count(\"u\")))\r\n    print(\"Número de espaços: \", texto.count(\" \"))",
        "contentType": "python"
    },
    {
        "created": "2024-11-27T22:09:48.132Z",
        "name": "Removedor de espaços a mais",
        "tags": [
            "remover",
            "espaços",
            "split"
        ],
        "content": "def remove_spaces(texto):\r\n    '''removeSpaces(texto) recebe um texto e substitui as sequências de dois ou mais espaços por um único espaço.'''\r\n    lista_nomes=texto.split(\" \")\r\n    for palavras in lista_nomes:\r\n        if palavras == \"\":\r\n            continue\r\n        print(palavras, end=\" \")",
        "contentType": "python"
    },
    {
        "created": "2024-11-27T22:10:46.227Z",
        "name": "Primeiro e ultimo nome",
        "tags": [
            "primeiro e ultimo nome",
            "remove meio",
            "rfind"
        ],
        "content": "def short_name(nome):\r\n    '''Recebe um nome completo (em resultado de um input)e devolve uma string com o primeiro e último nome'''\r\n    tamanho=len(nome)\r\n    primeiro_espaço=nome.index(\" \")\r\n    ultimo_espaco=nome.rfind(\" \")\r\n    primeiro_ultimo_nome=(nome[0:primeiro_espaço],nome[ultimo_espaco+1:tamanho])\r\n    return primeiro_ultimo_nome",
        "contentType": "python"
    },
    {
        "created": "2024-11-27T22:13:09.047Z",
        "name": "Conversor para numeros romanos",
        "tags": [
            "numero",
            "romano"
        ],
        "content": "import os\r\n\r\n# Limpa a consola\r\nos.system(\"cls\")\r\n\r\n\r\ndef roman_numeral(numero):\r\n    \"\"\"a função romanNumeral que recebe um número entre 1 e 999 (pedido ao utilizador) e devolva o mesmo valor em numeração Romana\r\n\r\n    Args:\r\n        numero (str): número entre 1 e 999\r\n\r\n    Returns:\r\n        str: o mesmo valor em numeração Romana\r\n    \"\"\"\r\n    primeiro_numero=0\r\n    segundo_numero=0\r\n    terceiro_numero=0\r\n   \r\n    def unidades(numero):\r\n        '''\r\n        Retorna o valor das unidades em numeração romana\r\n        '''\r\n        if numero == \"1\":\r\n            primeiro_numero=\"I\"\r\n        elif numero == \"2\":\r\n            primeiro_numero=\"II\"\r\n        elif numero == \"3\":\r\n            primeiro_numero=\"III\"\r\n        elif numero == \"4\":\r\n            primeiro_numero=\"IV\"\r\n        elif numero == \"5\":\r\n            primeiro_numero=\"V\"\r\n        elif numero == \"6\":\r\n            primeiro_numero=\"VI\"\r\n        elif numero == \"7\":\r\n            primeiro_numero=\"VII\"\r\n        elif numero == \"8\":\r\n            primeiro_numero=\"VIII\"\r\n        elif numero == \"9\":\r\n            primeiro_numero=\"IX\"\r\n        elif numero == \"0\":\r\n            print(\"Número Inválido\")\r\n        return primeiro_numero\r\n\r\n    def dezenas(numero):\r\n        '''\r\n        Retorna o valor das dezenas em numeração romana\r\n        '''\r\n        if numero == \"1\":\r\n            segundo_numero=\"X\"\r\n        elif numero == \"2\":\r\n            segundo_numero=\"XX\"\r\n        elif numero == \"3\":\r\n            segundo_numero=\"XXX\"\r\n        elif numero == \"4\":\r\n            segundo_numero=\"XL\"\r\n        elif numero == \"5\":\r\n            segundo_numero=\"L\"\r\n        elif numero == \"6\":\r\n            segundo_numero=\"LX\"\r\n        elif numero == \"7\":\r\n            segundo_numero=\"LXX\"\r\n        elif numero == \"8\":\r\n            segundo_numero=\"LXXX\"\r\n        elif numero == \"9\":\r\n            segundo_numero=\"XC\"\r\n        elif numero == \"0\":\r\n            return\r\n        return segundo_numero\r\n\r\n    def centenas(numero):\r\n        '''\r\n        Retorna o valor das centenas em numeração romana\r\n        '''\r\n        if numero == \"1\":\r\n            terceiro_numero=\"C\"\r\n        elif numero == \"2\":\r\n            terceiro_numero=\"CC\"\r\n        elif numero == \"3\":\r\n            terceiro_numero=\"CCC\"\r\n        elif numero == \"4\":\r\n            terceiro_numero=\"CD\"\r\n        elif numero == \"5\":\r\n            terceiro_numero=\"D\"\r\n        elif numero == \"6\":\r\n            terceiro_numero=\"DC\"\r\n        elif numero == \"7\":\r\n            terceiro_numero=\"DCC\"\r\n        elif numero == \"8\":\r\n            terceiro_numero=\"DCCC\"\r\n        elif numero == \"9\":\r\n            terceiro_numero=\"CM\"\r\n        return terceiro_numero\r\n    if len(numero)==1:\r\n        return unidades(numero)\r\n    elif len(numero)==2:\r\n        if numero[1]==\"0\":\r\n            numero_romano=f\"{dezenas(numero[0])}\"\r\n            return numero_romano\r\n        else:\r\n            numero_romano=f\"{dezenas(numero[0])}{unidades(numero[1])}\"\r\n        return numero_romano\r\n    elif len(numero)==3:\r\n        if numero[1]==\"0\" and numero[2]==\"0\":\r\n            numero_romano=f\"{centenas(numero[0])}\"\r\n            return numero_romano\r\n        elif numero[2]==\"0\":\r\n            numero_romano=f\"{centenas(numero[0])}{dezenas(numero[1])}\"\r\n            return numero_romano\r\n        if numero[1]==\"0\":\r\n            numero_romano=f\"{centenas(numero[0])}{unidades(numero[2])}\"\r\n            return numero_romano\r\n        numero_romano=f\"{centenas(numero[0])}{dezenas(numero[1])}{unidades(numero[2])}\"\r\n        return numero_romano\r\n    else:\r\n        return print(\"Número Inválido\")\r\n\r\n\r\n# Solicita o input do utilizador\r\nnumero = input(\"Indique um número de 1-999: \")\r\nprint(roman_numeral(numero))",
        "contentType": "python"
    },
    {
        "created": "2024-11-27T22:14:32.519Z",
        "name": "Numeros acima da média",
        "tags": [
            "media",
            "acima"
        ],
        "content": "import os\r\n\r\n# Limpa a consola\r\nos.system(\"cls\")\r\n\r\ndef above_average(numeros):\r\n    \"\"\"Retorna a quantidade de numeros acima da média dos números introduzidos pelo utilizador.\r\n\r\n    Args:\r\n        numeros (int): Lista de números inteiros introduzida pelo utilizador\r\n    \"\"\"\r\n    contador=0\r\n    media=sum(numeros)/10 #calcula a media da lista de numeros introduzida pelo utilizador\r\n    for i in numeros:\r\n        if i > media: #conta os numeros acima da media\r\n            contador+=1\r\n    return(contador)\r\n\r\nnumeros=[]\r\nwhile len(numeros) < 10: #pede que o utilizador introduza 10 números inteiros\r\n    numero_introduzido=int(input((f\"Introduza o número {len(numeros)+1} de 10: \")))\r\n    numeros.append(numero_introduzido)\r\nprint(\"\\n\")\r\nprint(f\"Existem {above_average(numeros)} números acima da média\")",
        "contentType": "python"
    },
    {
        "created": "2024-11-27T22:17:00.216Z",
        "name": "Euromilhões",
        "tags": [
            "euromilhões",
            "random"
        ],
        "content": "import os\r\nimport random\r\n\r\n# Limpa a consola\r\nos.system(\"cls\")\r\n\r\ndef generate_numbers(limite_inferior, limite_superior, quantidade):\r\n    return random.sample(range(limite_inferior, limite_superior+1), quantidade)\r\n\r\nwhile True:\r\n    os.system(\"cls\")\r\n    #calculo dos numeros\r\n    numeros=generate_numbers(1, 50, 5)\r\n    estrelas=generate_numbers(1, 12, 2)\r\n\r\n    print(f\"Chave do Euromilhões \\n Números: {numeros} \\t Estrelas: {estrelas}\")\r\n\r\n    print(\"\\n\")\r\n    chave=input(\"Deseja gerar nova chave? (S/N):\")\r\n    print(\"\\n\\n\")\r\n\r\n    if chave.upper() == \"S\":\r\n        continue\r\n    else:\r\n        exit()",
        "contentType": "python"
    },
    {
        "created": "2024-11-27T22:22:01.180Z",
        "name": "IMP - Definir caminho ficheiro",
        "tags": [
            "caminho",
            "ficheiro",
            "path"
        ],
        "content": "#Retorna o caminho absoluto do ficheiro Python atualmente em execução.\nroot_dir = os.path.dirname(os.path.abspath(__file__))\n#Altera o diretório atual para o diretório do ficheiro python\nos.chdir(root_dir)\nnome_ficheiro = \"nomeficheiro.txt\"\n#Constroi os path corretos para diferentes sistemas operativos.\nfile_path = os.path.join(\"nomedapaste\", nome_ficheiro)",
        "contentType": "python"
    },
    {
        "created": "2024-11-27T22:24:41.595Z",
        "name": "IMP - Verificador de existencia de ficheiro",
        "tags": [
            "verificar",
            "existencia",
            "ficheiro",
            "criar"
        ],
        "content": "import os\n\nif os.path.exists(file_path):\n    with open(file_path, 'r') as file:\n        print(file.read())\nelse:\n    print(\"Ficheiro não encontrado.\")",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T11:20:46.792Z",
        "name": "Converte temperatura de ºCelsius para º Fahrenheit",
        "tags": [
            "temperatura",
            "celsius",
            "fahrenheit"
        ],
        "content": "\"\"\" \r\nConverte temperatura de ºCelsius para º Fahrenheit\r\nforma de conversão: ºF = 1.8 * ºC + 32\r\n\"\"\"\r\ntemp_celsius = float(input(\"Temperatura em ºCelsius: \"))\r\ntemp_fahrenheit = 1.8 * temp_celsius + 32\r\n\r\nprint(\"Temperatura em ºFahrenheit {:.2f} ºF\".format(temp_fahrenheit))",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T11:25:46.505Z",
        "name": "IMC",
        "tags": [
            "IMC"
        ],
        "content": "\"\"\" \r\nCalcula o IMC (Índice de Massa Corporal), dado o peso e a altura\r\n\"\"\"\r\npeso = float(input(\"Peso (kg):\"))\r\naltura = float(input(\"\\nAltura (m):\"))\r\n\r\n# Calcula o índice de massa corporal, IMC\r\nindice_imc = peso / (pow(altura, 2))\r\n\r\nprint(\"\\nO seu IMC é: {:.2f}\".format(indice_imc))",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T11:30:34.261Z",
        "name": "Par ou Impar",
        "tags": [
            "par",
            "impar"
        ],
        "content": "# Função para verificar se o número é par ou ímpar\r\ndef verificar_par_impar(numero):\r\n    if numero % 2 == 0:\r\n        return True  # O número é par\r\n    else:\r\n        return False  # O número é ímpar\r\n\r\n# Leitura do número do utilizador\r\nnumero_informado = int(input(\"Indique um número inteiro:\"))\r\n\r\n# Verificação e exibição do resultado\r\nif verificar_par_impar(numero_informado):\r\n    print(f'\\nO número {numero_informado} é par')\r\nelse:\r\n    print(f'\\nO número {numero_informado} é ímpar')",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T11:31:58.476Z",
        "name": "Simulador de Esforço Cardiaco",
        "tags": [
            "esforço",
            "FCM"
        ],
        "content": "# Função para calcular a FCM com base no sexo e idade\r\ndef calcular_fcm(sexo, idade):\r\n    if sexo == \"F\":\r\n        return 226 - idade  # FCM para mulheres\r\n    elif sexo == \"M\":\r\n        return 220 - idade  # FCM para homens\r\n    else:\r\n        return None  # Dados inválidos\r\n\r\n# Leitura do sexo e idade do utilizador\r\nsexo_informado = input(\"\\n\\n\\n\\tIndique o Sexo (M/F): \")\r\nidade_informada = int(input(\"\\n\\n\\tIndique a idade: \"))\r\n\r\n# Cálculo da FCM e exibição do resultado\r\nfcm = calcular_fcm(sexo_informado.upper(), idade_informada)\r\n\r\nif fcm is not None:\r\n    print(f'\\n\\tFCM = {fcm} bpm')\r\nelse:\r\n    print(\"Dados incorretos!\")",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T11:34:57.563Z",
        "name": "Peso Ideal",
        "tags": [
            "peso ideal"
        ],
        "content": "# Função para calcular o peso ideal com base no sexo e altura\r\ndef calcular_peso_ideal(sexo, altura):\r\n    if sexo == \"m\":\r\n        k = 4  # Fator para homens\r\n    elif sexo == \"f\":\r\n        k = 2  # Fator para mulheres\r\n    else:\r\n        return None  # Sexo inválido\r\n\r\n    return (altura - 100) - (altura - 150) / k  # Fórmula do peso ideal\r\n\r\n# Leitura do sexo e altura do utilizador\r\nsexo_informado = input(\"Indique o sexo (M/F): \").lower()\r\nif sexo_informado not in [\"m\", \"f\"]:\r\n    print(\"Não inseriu dados corretos\")\r\n    exit()\r\n\r\naltura_informada = int(input(\"Indique a altura (cm): \"))\r\n\r\n# Cálculo do peso ideal e exibição do resultado\r\npeso_ideal = calcular_peso_ideal(sexo_informado, altura_informada)\r\nif peso_ideal is not None:\r\n    print(f\"O Peso Ideal é {peso_ideal:.2f} Kg\")\r\nelse:\r\n    print(\"Dados incorretos!\")",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T11:43:12.951Z",
        "name": "Categorizar IMC",
        "tags": [
            "IMC"
        ],
        "content": "# Função para calcular o IMC\r\ndef calcular_imc(peso, altura):\r\n    return peso / (altura ** 2)  # Fórmula do IMC\r\n\r\n# Função para categorizar o IMC\r\ndef categorizar_imc(indice_imc):\r\n    if indice_imc < 18.5:\r\n        return \"Baixo Peso\"\r\n    elif indice_imc < 25:\r\n        return \"Peso Normal\"\r\n    elif indice_imc < 30:\r\n        return \"Excesso de Peso\"\r\n    elif indice_imc < 35:\r\n        return \"Obesidade Grau I\"\r\n    elif indice_imc < 40:\r\n        return \"Obesidade Grau II\"\r\n    else:\r\n        return \"Obesidade Grau III (mórbida)\"\r\n\r\n# Leitura do peso e altura\r\npeso_informado = float(input(\"Peso (kg): \"))\r\naltura_informada = float(input(\"Altura (m): \"))\r\n\r\n# Cálculo do IMC\r\nimc = calcular_imc(peso_informado, altura_informada)\r\n\r\n# Exibição do IMC\r\nprint(f'\\nO seu IMC é: {imc:.2f}')\r\n\r\n# Exibição da categoria do IMC\r\ncategoria_imc = categorizar_imc(imc)\r\nprint(f\"\\t{categoria_imc}\")",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T11:44:48.400Z",
        "name": "Simulador de peso noutros planetas",
        "tags": [
            "peso",
            "planetas"
        ],
        "content": "# Função para calcular o peso no planeta com base na gravidade\r\ndef calcular_peso_no_planeta(peso, gravidade):\r\n    return peso * gravidade / 0.98  # Ajuste para gravidade na Terra\r\n\r\n# Função para determinar a gravidade do planeta com base no código\r\ndef obter_gravidade_do_planeta(codigo_planeta):\r\n    gravidades = {\r\n        1: 0.37,  # Mercúrio\r\n        2: 0.90,  # Vénus\r\n        3: 0.37,  # Marte\r\n        4: 2.53,  # Júpiter\r\n        5: 1.06,  # Saturno\r\n        6: 0.91,  # Urano\r\n        7: 1.14   # Neptuno\r\n    }\r\n    return gravidades.get(codigo_planeta, None)  # Retorna None se o código for inválido\r\n\r\n# Menu de planetas\r\ndef exibir_menu_planetas():\r\n    print(\"\\t\\t\\t\\t\\tPlanetas\")\r\n    print(\"\\t\\t\\t\\t1 - Mercúrio\")\r\n    print(\"\\t\\t\\t\\t2 - Vénus\")\r\n    print(\"\\t\\t\\t\\t3 - Marte\")\r\n    print(\"\\t\\t\\t\\t4 - Júpiter\")\r\n    print(\"\\t\\t\\t\\t5 - Saturno\")\r\n    print(\"\\t\\t\\t\\t6 - Urano\")\r\n    print(\"\\t\\t\\t\\t7 - Neptuno\")\r\n\r\n# Leitura do peso e código do planeta\r\nexibir_menu_planetas()\r\n\r\npeso_informado = float(input(\"\\n\\nIndique o seu peso (kg): \"))\r\ncodigo_planeta = int(input(\"\\n\\nIndique o código do planeta: \"))\r\n\r\n# Obtenção da gravidade do planeta\r\ngravidade_planeta = obter_gravidade_do_planeta(codigo_planeta)\r\n\r\nif gravidade_planeta is None:\r\n    print(\"Código de planeta inválido! :(\")\r\n    exit()\r\n\r\n# Cálculo do peso no planeta e exibição do resultado\r\npeso_no_planeta = calcular_peso_no_planeta(peso_informado, gravidade_planeta)\r\nprint(f\"\\nO seu peso de {peso_informado:.2f} kg no planeta {codigo_planeta} seria de {peso_no_planeta:.2f} kg\")\r\n",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T11:47:26.458Z",
        "name": "Etapa de vida (Idade)",
        "tags": [
            "idade",
            "etapa"
        ],
        "content": "# Função para determinar a etapa de vida com base na idade\r\ndef determinar_etapa_de_vida(idade):\r\n    if idade <= 12:\r\n        if idade <= 2:\r\n            return \"Infância - Primeira Infância\"\r\n        elif idade <= 6:\r\n            return \"Infância - Infância Intermédia\"\r\n        else:\r\n            return \"Infância - Pré-adolescência\"\r\n    elif idade <= 19:\r\n        if idade <= 14:\r\n            return \"Adolescência - Puberdade\"\r\n        else:\r\n            return \"Adolescência - Adolescência tardia\"\r\n    elif idade <= 59:\r\n        if idade <= 39:\r\n            return \"Adultez - Jovem Adulto\"\r\n        else:\r\n            return \"Adultez - Meia-idade\"\r\n    else:\r\n        if idade <= 74:\r\n            return \"Terceira Idade - Idosos Jovens\"\r\n        else:\r\n            return \"Terceira Idade - Idosos Velhos\"\r\n\r\n# Leitura da idade do utilizador\r\nidade_informada = int(input(\"\\n\\tIndique a sua idade: \"))\r\n\r\n# Determinação da etapa de vida e exibição do resultado\r\netapa_de_vida = determinar_etapa_de_vida(idade_informada)\r\nprint(f'\\n\\tEtapa de vida: {etapa_de_vida}')",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T11:49:48.022Z",
        "name": "Fatrorial de um Numero",
        "tags": [
            "fatorial"
        ],
        "content": "# Função para calcular o fatorial de um número\r\ndef calcular_fatorial(numero):\r\n    fatorial = 1  # Inicializa o fatorial a 1\r\n    for i in range(numero, 1, -1):  # Loop de número até 1 (decrescente)\r\n        fatorial *= i\r\n    return fatorial\r\n\r\n# Leitura do número\r\nnumero_informado = int(input(\"Indique um número: \"))\r\n\r\n# Verificação de número negativo\r\nif numero_informado < 0:\r\n    print(\"Indique, p.f., um número inteiro >= 0\")\r\nelse:\r\n    # Cálculo do fatorial e exibição do resultado\r\n    fatorial_resultado = calcular_fatorial(numero_informado)\r\n    print(f\"Fatorial de {numero_informado} é {fatorial_resultado}\")",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T11:52:55.617Z",
        "name": "Soma de numeros pares entre dois limites",
        "tags": [
            "numeros pares",
            "soma",
            "entre limites"
        ],
        "content": "# Função para calcular a soma dos números pares entre dois limites\r\ndef soma_numeros_pares(limite_inf, limite_sup):\r\n    soma = 0  # Inicializa a soma\r\n    for i in range(limite_inf, limite_sup + 1):  # Itera do limite inferior até o superior\r\n        if i % 2 == 0:  # Verifica se o número é par\r\n            soma += i  # Soma o número par\r\n    return soma\r\n\r\n# Leitura dos limites inferior e superior\r\nlimite_inferior = int(input(\"Indique o limite Inferior: \"))\r\nlimite_superior = int(input(\"Indique o limite Superior: \"))\r\n\r\n# Cálculo da soma dos números pares e exibição do resultado\r\nsoma_pares = soma_numeros_pares(limite_inferior, limite_superior)\r\nprint(f\"A soma de todos os pares entre {limite_inferior} e {limite_superior} é {soma_pares}\")",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T11:54:51.378Z",
        "name": "Jogo Adivinha o numero",
        "tags": [
            "adivinha",
            "aleatorio",
            "numero"
        ],
        "content": "import random\r\n\r\n# Função para gerar um número aleatório entre 1 e 50\r\ndef gerar_numero_aleatorio():\r\n    return random.randint(1, 50)\r\n\r\n# Função para realizar o jogo de adivinhar o número\r\ndef adivinhar_numero(numero_gerado):\r\n    num_tentativas = 1\r\n    palpite_user = int(input(f\"Indique o seu {num_tentativas}º palpite: \"))\r\n    \r\n    while numero_gerado != palpite_user and num_tentativas < 10:\r\n        if palpite_user > numero_gerado:\r\n            print(\"O número é MENOR \\n\")\r\n        elif palpite_user < numero_gerado:\r\n            print(\"O número é MAIOR \\n\")\r\n        num_tentativas += 1\r\n        palpite_user = int(input(f\"Indique o seu {num_tentativas}º palpite: \"))\r\n\r\n    # Resultado do jogo\r\n    if numero_gerado == palpite_user:\r\n        print(f\"Parabéns! Acertou em {num_tentativas} tentativas\")\r\n    else:\r\n        print(\"Esgotou as 10 tentativas! :(\")\r\n\r\n# Execução do jogo\r\nprint(\"\\t\\tJOGO Adivinha o Número\\n\")\r\nnumero_gerado = gerar_numero_aleatorio()  # Gera o número aleatório\r\nadivinhar_numero(numero_gerado)  # Inicia o jogo",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T11:55:56.006Z",
        "name": "Numero Primo",
        "tags": [
            "numero primo"
        ],
        "content": "# Função para verificar se um número é primo\r\ndef verificar_numero_primo(numero):\r\n    # Considera o número como primo inicialmente\r\n    primo = True\r\n    for i in range(2, numero):  # O divisor varia entre 2 e o número-1\r\n        resto = numero % i\r\n        if resto == 0:  # Quando encontro um resto 0, significa que o número não é primo\r\n            primo = False\r\n            break\r\n    return primo\r\n\r\n# Leitura do número\r\nnumero_informado = int(input(\"Número: \"))\r\n\r\n# Verificação se o número é primo\r\nresultado = verificar_numero_primo(numero_informado)\r\n\r\n# Exibição do resultado\r\nif resultado:\r\n    print(f'O número {numero_informado} é primo')\r\nelse:\r\n    print(f'O número {numero_informado} não é primo')",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T11:56:45.940Z",
        "name": "Fibonacci",
        "tags": [
            "fibonacci"
        ],
        "content": "# Função para gerar a sequência de Fibonacci até o n-ésimo termo\r\ndef gerar_sequencia_fibonacci(n_termos):\r\n    seq_termos = \"\"  # Inicializa a sequência como uma string vazia\r\n    penultimo_termo = 0\r\n    ultimo_termo = 1\r\n\r\n    # Trata os 3 primeiros termos\r\n    if n_termos >= 1:  # Trata o 1º termo da sequência\r\n        seq_termos = \"0\"\r\n    if n_termos >= 2:  # Trata o 2º termo da sequência\r\n        seq_termos += \", 1\"\r\n\r\n    # Trata os termos seguintes (do 3º em diante)\r\n    for i in range(3, n_termos + 1):\r\n        novo_termo = penultimo_termo + ultimo_termo  # Cada termo resulta da soma dos dois anteriores\r\n        seq_termos += \", \" + str(novo_termo)  # Concatena o novo termo à sequência\r\n        penultimo_termo = ultimo_termo\r\n        ultimo_termo = novo_termo\r\n\r\n    return seq_termos\r\n\r\n# Leitura do número de termos\r\nn_termos_informado = int(input(\"\\n\\n\\n\\t\\t\\t Nº de termos a imprimir: \"))\r\n\r\n# Geração e exibição da sequência\r\nsequencia = gerar_sequencia_fibonacci(n_termos_informado)\r\nprint(f'\\n\\n\\t\\t\\t Primeiros {n_termos_informado} termos da sequência de Fibonacci: {sequencia}')",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T12:20:34.434Z",
        "name": "Numero Perfeito",
        "tags": [
            "numero perfeito"
        ],
        "content": "# Função para verificar se um número é perfeito\r\ndef verificar_numero_perfeito(numero):\r\n    soma_divisores = 0\r\n    for i in range(numero - 1, 0, -1):  # Itera pelos divisores do número (de 1 até o número-1)\r\n        if numero % i == 0:  # Se i for divisor de numero\r\n            soma_divisores += i  # Soma os divisores\r\n\r\n    return soma_divisores == numero  # Verifica se a soma dos divisores é igual ao próprio número\r\n\r\n# Leitura do número\r\nnumero_informado = int(input(\"Indique um número: \"))\r\n\r\n# Verificação se o número é perfeito\r\nresultado = verificar_numero_perfeito(numero_informado)\r\n\r\n# Exibição do resultado\r\nif resultado:\r\n    print(f\"O número {numero_informado} é um número perfeito\")\r\nelse:\r\n    print(f\"O número {numero_informado} não é um número perfeito\")",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T12:21:51.128Z",
        "name": "Converter numero para binario",
        "tags": [
            "binario"
        ],
        "content": "# Função para converter número para binário\r\ndef converter_para_binario(numero):\r\n    resultado = \"\"\r\n    while numero // 2 >= 1:  # Enquanto o número for pelo menos 2\r\n        resto = numero % 2  # Calcula o resto da divisão por 2\r\n        resultado = str(resto) + \" \" + resultado  # Concatena o resto à esquerda do resultado\r\n        numero = numero // 2  # Atualiza o número para o próximo quociente da divisão\r\n\r\n    resultado = str(numero) + \" \" + resultado  # Adiciona o último número (0 ou 1)\r\n    return resultado\r\n\r\n# Leitura do número\r\nnumero_informado = int(input(\"Número: \"))\r\n\r\n# Converte o número para binário\r\nbinario = converter_para_binario(numero_informado)\r\n\r\n# Exibe o resultado\r\nprint(binario)",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T12:23:09.004Z",
        "name": "Maior numero",
        "tags": [
            "maior numero"
        ],
        "content": "# Função para determinar o segundo maior valor entre n números\r\ndef determinar_segundo_maior(n):\r\n    primeiro_maior = 0  # Maior número\r\n    segundo_maior = 0   # Segundo maior número\r\n    \r\n    for i in range(n):  # Ler n números\r\n        numero = int(input(\"Número: \"))\r\n        \r\n        if numero > primeiro_maior:  # Se o número for o maior\r\n            segundo_maior = primeiro_maior  # O antigo maior passa a ser o segundo maior\r\n            primeiro_maior = numero  # Atualiza o maior número\r\n        elif numero > segundo_maior:  # Se for maior que o segundo maior\r\n            segundo_maior = numero  # Atualiza o segundo maior número\r\n    \r\n    return segundo_maior\r\n\r\n# Leitura do número de termos\r\nn_informado = int(input(\"Quantos números deseja ler? \"))\r\n\r\n# Determina o segundo maior valor\r\nsegundo_maior_valor = determinar_segundo_maior(n_informado)\r\n\r\n# Exibe o resultado\r\nprint(f'\\n\\n\\t\\tSegundo maior valor da lista de números lidos é: {segundo_maior_valor}')",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T12:24:22.937Z",
        "name": "Inverter Texto",
        "tags": [
            "inverter"
        ],
        "content": "# Função para inverter o texto\r\ndef inverter_texto(texto):\r\n    \"\"\"\r\n    Recebe um texto e imprime o mesmo texto, mas por ordem inversa\r\n    Args: string\r\n    \"\"\"\r\n    print(texto[::-1])  # Imprime o texto invertido\r\n\r\n# Leitura do texto\r\ntexto_informado = input(\"Indique um Texto: \")\r\n\r\n# Chama a função para inverter o texto\r\ninverter_texto(texto_informado)",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T12:30:02.303Z",
        "name": "Verificar Capicua",
        "tags": [
            "capicua"
        ],
        "content": "# Função que verifica se um texto é capicua\r\ndef verificar_capicua(texto):\r\n    \"\"\"\r\n    Recebe um texto e devolve um valor booleano: True se for capicua, False caso não seja\r\n    Args: texto (string)\r\n    Returns: booleano (True ou False)\r\n    \"\"\"\r\n    # Verificação simplificada de capicua\r\n    return texto == texto[::-1]\r\n\r\n# Leitura do texto\r\ntexto_informado = input(\"\\tInsira um texto: \")\r\n\r\n# Verifica se o texto é capicua (considerando minúsculas)\r\nif verificar_capicua(texto_informado.lower()):\r\n    print(f\"\\t{texto_informado} é capicua\")\r\nelse:\r\n    print(f\"\\t{texto_informado} não é capicua\")",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T12:31:10.217Z",
        "name": "Primeiro e Ultimo Nome",
        "tags": [
            "primeiro",
            "ultimo",
            "nome"
        ],
        "content": "# Função que recebe um nome e devolve o primeiro e último nome\r\ndef obter_primeiro_e_ultimo_nome(nome):\r\n    \"\"\"\r\n    Função que recebe um nome e devolve apenas o primeiro nome concatenado com o último\r\n    Args: nome (string)\r\n    Returns: string\r\n    \"\"\"\r\n    pos_espaco = nome.find(\" \")  # Procura o primeiro espaço\r\n    if pos_espaco != -1:\r\n        primeiro_nome = nome[:pos_espaco]  # Obtém o primeiro nome (até ao espaço)\r\n        pos_espaco = nome.rfind(\" \")  # Procura o último espaço\r\n        if pos_espaco != -1:\r\n            ultimo_nome = nome[pos_espaco + 1:]  # Obtém o último nome (do espaço até ao fim)\r\n            nome_abreviado = primeiro_nome + \" \" + ultimo_nome\r\n            return nome_abreviado\r\n    return \"Nome inválido\"  # Caso não tenha encontrado os espaços necessários\r\n\r\n\r\nnome_usuario = input(\"Nome: \")\r\nprint(obter_primeiro_e_ultimo_nome(nome_usuario))",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T12:32:41.690Z",
        "name": "recebe uma string com o nome completo e retorna o primeiro nome, último nome e as iniciais dos nomes intermédios.",
        "tags": [
            "primeiro e ultimo nome mais iniciais"
        ],
        "content": "def obter_nome_padrao(nome):\r\n    \"\"\"\r\n    Função que recebe uma string com o nome completo e retorna o primeiro nome, último nome \r\n    e as iniciais dos nomes intermédios.\r\n    Args: string\r\n    Returns: string\r\n    \"\"\"\r\n    nome_abreviado = \"\"\r\n    \r\n    # --------- Primeiro nome --------------------\r\n    pos_espaco = nome.find(\" \")  # Procura o primeiro espaço\r\n    if pos_espaco != -1:\r\n        nome_abreviado = nome[:pos_espaco]  # Obtém o primeiro nome (até ao espaço)\r\n    else:\r\n        return \"Nome inválido!\"\r\n    \r\n    # --------- Iniciais dos nomes intermédios --------------------\r\n    for i in range(nome.find(\" \"), nome.rfind(\" \")):\r\n        if nome[i] == \" \":\r\n            nome_abreviado += \" \" + nome[i + 1] + \".\"  # Adiciona a inicial do nome intermédio\r\n    \r\n    # --------- Último nome --------------------\r\n    pos_espaco = nome.rfind(\" \")  # Procura o último espaço\r\n    if pos_espaco != -1:\r\n        nome_abreviado += \" \" + nome[pos_espaco + 1:]  # Obtém o último nome\r\n    \r\n    return nome_abreviado\r\n\r\n\r\nnome_usuario = input(\"Indique um nome: \")\r\nprint(obter_nome_padrao(nome_usuario))",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T12:34:10.630Z",
        "name": "Password baseada no username",
        "tags": [
            "password",
            "username"
        ],
        "content": "import random\r\n\r\n# Função geradora de passwords\r\ndef generate_password(user_name):\r\n    \"\"\"\r\n    Gera uma password baseada no user_name.\r\n    A senha é composta pelos caracteres nas posições ímpares do user_name seguidos por números aleatórios.\r\n    A senha termina com o número de caracteres do user_name.\r\n    \r\n    Args: \r\n        user_name (str): Nome de utilizador.\r\n    \r\n    Returns:\r\n        str: A senha gerada.\r\n    \"\"\"\r\n    if ' ' in user_name:  # Verifica se o nome de utilizador contém espaços\r\n        return \"Username inválido! O nome não pode conter espaços.\"\r\n    \r\n    password = \"\"  # Inicializa a senha\r\n    # Pega os caracteres nas posições ímpares (considerando que o índice começa em 0)\r\n    for i in range(1, len(user_name), 2):  \r\n        password += user_name[i] + str(random.randint(1, 9))  # Adiciona a letra + número aleatório\r\n    \r\n    # Adiciona o número de caracteres do user_name no final da senha\r\n    password += str(len(user_name))\r\n    \r\n    return password\r\n\r\n\r\n# Entrada do nome de utilizador\r\nuser_name = input(\"Username: \")\r\npasswd = generate_password(user_name)\r\nprint(\"\\nPassword gerada:\", passwd)",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T12:35:58.182Z",
        "name": "Texto Inverso",
        "tags": [
            "texto",
            "inverso"
        ],
        "content": "def reverse_words(text):\r\n    \"\"\"\r\n    Recebe uma string (texto) e devolve o mesmo texto com as palavras em ordem inversa.\r\n    Args: \r\n        text (str): Texto a ser invertido.\r\n    Returns: \r\n        str: Texto com as palavras invertidas.\r\n    \"\"\"\r\n    words = text.split()  # Divide o texto em uma lista de palavras\r\n    reversed_text = ' '.join(reversed(words))  # Inverte a lista de palavras e as junta de volta em uma string\r\n    return reversed_text\r\n\r\ntext = input(\"Texto: \")\r\nprint(reverse_words(text))",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T12:37:25.073Z",
        "name": "Numero de caracteres a imprimir por linha",
        "tags": [
            "caracteres",
            "linha"
        ],
        "content": "def print_char_line(text, num_car):\r\n    \"\"\"\r\n    Recebe um texto e imprime num_car caracteres por linha.\r\n    Args: \r\n        text (str): O texto a ser impresso.\r\n        num_car (int): O número de caracteres por linha.\r\n    \"\"\"\r\n    for i in range(0, len(text), num_car):  # percorre o texto com passos de num_car\r\n        print(text[i:i+num_car])  # imprime uma fatia do texto com num_car caracteres\r\n\r\n# Exemplo de uso:\r\ntexto = input(\"Texto: \")\r\nnum_car = int(input(\"\\nNº de caracteres a imprimir por linha: \"))\r\nprint_char_line(texto, num_car)",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T12:41:16.349Z",
        "name": "Quantos números são acima da média",
        "tags": [
            "média",
            "acima"
        ],
        "content": "def above_average(list_numbers):\r\n    \"\"\"\r\n    Recebe uma lista de números e retorna quantos são superiores à média.\r\n    Args:\r\n        list_numbers (list): lista de números inteiros.\r\n    Returns:\r\n        int: quantos números são superiores à média.\r\n    \"\"\"\r\n    media = sum(list_numbers) / len(list_numbers)  # calcula a média\r\n    cont = 0\r\n    for numero in list_numbers:\r\n        if numero > media:\r\n            cont += 1\r\n    return cont\r\n\r\n# Ler 10 números e indicar quantos estão acima da média\r\nlist_numbers = []\r\n\r\n# Loop para ler os 10 números\r\nfor i in range(1, 11):\r\n    numero = int(input(f\"{i}º Número: \"))\r\n    list_numbers.append(numero)\r\n\r\n# Exibir a lista de números e a quantidade de números acima da média\r\nprint(f\"\\nLista de Números: {list_numbers}\")\r\nprint(f\"\\nExistem {above_average(list_numbers)} números acima da média.\")\r\n",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T12:43:55.803Z",
        "name": "EUROMILHÕES",
        "tags": [
            "euromilhões"
        ],
        "content": "import random\r\n\r\ndef generateNumbers(limInf, limSup, qts):\r\n    \"\"\"\r\n    Recebe limInf, limSup e quantos números gerar, e retorna uma lista com os números gerados.\r\n    Garante que não haja números repetidos.\r\n    \"\"\"\r\n    numbers = set()  # Utiliza um set para evitar repetições\r\n    while len(numbers) < qts:\r\n        number = random.randint(limInf, limSup)\r\n        numbers.add(number)  # O set ignora automaticamente duplicatas\r\n    return sorted(numbers)\r\n\r\nopcao = \"S\"\r\nwhile opcao.upper() == \"S\":\r\n    # Gera os números principais e as estrelas\r\n    print(\"\\nChave do Euromilhões:\", generateNumbers(1, 50, 5), \"  Estrelas:\", generateNumbers(1, 12, 2))\r\n    # Pergunta ao usuário se deseja gerar outra chave\r\n    opcao = input(\"Deseja Gerar uma nova chave (S/N)? \").strip().upper()\r\n    while opcao not in [\"S\", \"N\"]:\r\n        opcao = input(\"Opção inválida! Deseja Gerar uma nova chave (S/N)? \").strip().upper()\r\n",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T12:46:46.615Z",
        "name": "Recebe 10 pontuações e retorna as positivas",
        "tags": [
            "pontuações"
        ],
        "content": "def positive_list(score):\r\n    \"\"\"\r\n    Recebe uma lista de 10 pontuações e retorna uma lista com as positivas.\r\n    \"\"\"\r\n    positive_score = []  # Nova lista\r\n    for i in range(len(score)):\r\n        if score[i] >= 10:\r\n            positive_score.append(score[i])  # Adiciona à nova lista\r\n    return positive_score\r\n\r\n\r\n# Ler pontuação de 10 participantes e indicar aquelas >= 10\r\nscore = []\r\ni = 1\r\nwhile i <= 10:  # Ciclo para ler as 10 pontuações\r\n    try:\r\n        number = int(input(\"\\nPontuação do {0}º participante:\".format(i)))\r\n        if number < 0 or number > 20:\r\n            raise ValueError()\r\n    except ValueError:\r\n        print(\"Pontuação inválida. Por favor, insira valores no intervalo [0-20].\")\r\n    except:\r\n        print(\"Ocorreu um erro inesperado, tente novamente!\")\r\n    else:\r\n        score.append(number)\r\n        i += 1\r\n\r\n# positive_score é a lista com pontuações positivas\r\npositive_score = positive_list(score)\r\nprint(\"\\nPontuações positivas: {0}\".format(positive_score))",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T12:48:25.222Z",
        "name": "Nomes e pontuações positivas",
        "tags": [
            "pontuações"
        ],
        "content": "import os\r\n\r\ndef positive_list(names, score):\r\n    \"\"\"\r\n    Recebe uma lista de 10 pontuações e retorna uma lista com os nomes e pontuações positivas.\r\n    \"\"\"\r\n    pscore = []  # Nova lista de pontuações positivas\r\n    pnames = []  # Nova lista de nomes\r\n    for i in range(len(score)):\r\n        if score[i] >= 10:\r\n            pscore.append(score[i])  # Adiciona à lista de pontuações positivas\r\n            pnames.append(names[i])  # Adiciona nomes à lista\r\n    return pnames, pscore\r\n\r\n\r\nnames = []\r\nscore = []\r\ni = 1\r\nwhile i <= 10:  # Ciclo para ler as 10 pontuações\r\n    try:\r\n        name = input(\"\\nNome do participante {0}  : \".format(i))\r\n        number = int(input(\"Pontuação participante {0}: \".format(i)))\r\n        if number < 0 or number > 20:  # Cria exceção para valores inferiores a 0 ou > 20\r\n            raise ValueError()\r\n    except ValueError:\r\n        print(\"Pontuação fora dos limites válidos. Por favor, tente novamente!\")\r\n    except:\r\n        print(\"Pontuação inválida. Por favor, tente novamente!\")\r\n    else:\r\n        names.append(name)  # Acrescenta às listas\r\n        score.append(number)\r\n        i += 1\r\n\r\npnames, pscore = positive_list(names, score)\r\n\r\nos.system(\"cls\")  # Limpa a tela (comando para sistemas Windows)\r\nprint(\"Participantes com pontuações positivas \\n\")\r\nprint(\"Nomes     :\", pnames)\r\nprint(\"Pontuações:\", pscore)",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T12:50:14.025Z",
        "name": "Mês com maior, menor e media de faturação",
        "tags": [
            "maior",
            "menor",
            "média"
        ],
        "content": "meses = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"]\r\n\r\ndef maior_faturacao(l_faturacao):\r\n    \"\"\" \r\n    Retorna o mês com maior faturação\r\n    \"\"\"\r\n    maior = max(l_faturacao)         # Maior valor\r\n    pos = l_faturacao.index(maior)   # Posição do maior valor na lista\r\n    return meses[pos]                # Retorna o mês correspondente\r\n\r\ndef menor_faturacao(l_faturacao):\r\n    \"\"\" \r\n    Retorna o mês com menor faturação\r\n    \"\"\"\r\n    menor = min(l_faturacao)         # Menor valor\r\n    pos = l_faturacao.index(menor)   # Posição do menor valor na lista\r\n    return meses[pos]                # Retorna o mês correspondente  \r\n\r\ndef media_faturacao(l_faturacao):\r\n    \"\"\"\r\n    Retorna a média da faturação\r\n    \"\"\"\r\n    media = sum(l_faturacao) / len(l_faturacao)\r\n    return media\r\n\r\nl_faturacao = []\r\nfor i in range(12):\r\n    faturacao = int(input(\"Indique a faturação do mês de {:s}:\".format(meses[i])))\r\n    l_faturacao.append(faturacao)\r\n\r\nprint(\"\\nMês de maior faturação é \", maior_faturacao(l_faturacao))\r\nprint(\"\\nMês de menor faturação é \", menor_faturacao(l_faturacao))\r\nprint(\"\\nMédia de faturação é  {:.2f}\".format(media_faturacao(l_faturacao)))\r\n",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T12:52:06.964Z",
        "name": "Remove duplicados de lista",
        "tags": [
            "duplicados"
        ],
        "content": "def lista_sem_duplicados(l_numbers):\r\n    \"\"\"\r\n    Recebe uma lista de números e retorna uma lista sem duplicados\r\n    \"\"\"\r\n    new_list = []\r\n    l_numbers.sort()\r\n    for i in range(0, len(l_numbers)):\r\n        if new_list.count(l_numbers[i]) == 0:           # Se não existe na new_list\r\n            new_list.append(l_numbers[i])\r\n    return new_list\r\n\r\nl_numbers = []\r\nn = int(input(\"Quantos números deseja ler? \"))\r\nfor i in range(n):\r\n    number = int(input(\"Número: \"))\r\n    l_numbers.append(number)\r\n\r\nnew_list = lista_sem_duplicados(l_numbers)\r\nprint(new_list)",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T12:53:40.512Z",
        "name": "Lista de visitantes",
        "tags": [
            "visitantes"
        ],
        "content": "import math\r\n\r\ndias = [\"Domingo\", \"Segunda\", \"Terça  \", \"Quarta \", \"Quinta \", \"Sexta  \", \"Sábado \"]\r\n\r\ndef lista_visitantes(visitantes):\r\n    visitantes_ord = visitantes.copy()  # Cria uma cópia da lista\r\n    visitantes_ord.sort(reverse=True)    # Ordena a lista\r\n    for i in range(7):\r\n        pos = visitantes.index(visitantes_ord[i])   # Obtém a posição na lista original\r\n        print(dias[pos], \"\\t\", visitantes_ord[i])    # Para saber qual o dia que lhe corresponde\r\n        visitantes[pos] = -1\r\n    print(\"Nº médio de visitantes: {:.2f}\".format(sum(visitantes_ord) / len(visitantes_ord)))\r\n\r\n\r\n# Devolve o dia mais próximo do valor médio de visitas\r\ndef proximo_media(visitantes):\r\n    media = sum(visitantes) / len(visitantes)\r\n    diferenca = math.inf\r\n    for i in range(0, 7):\r\n        if abs(visitantes[i] - media) < diferenca:\r\n            pos = i\r\n            diferenca = abs(visitantes[i] - media)\r\n    return dias[pos]\r\n\r\nvisitantes = []\r\nfor i in range(7):\r\n    num = int(input(\"Nº visitantes na/no {0} \\t: \".format(dias[i])))\r\n    visitantes.append(num)\r\n\r\ndia = proximo_media(visitantes)\r\nlista_visitantes(visitantes)\r\nprint(\"Dia mais próximo do valor médio:\", dia)\r\n\r\ninput()",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T12:54:56.441Z",
        "name": "Tickets",
        "tags": [
            "tickets"
        ],
        "content": "import os\r\n\r\n# Variáveis globais\r\ncomp_fila = 20\r\nsenha = 1\r\n\r\ndef tirar_ticket(tickets):\r\n    \"\"\"\r\n    Recebe a lista de tickets e gera um novo ticket.\r\n    \"\"\"\r\n    global comp_fila\r\n    if len(tickets) == comp_fila:   # Se a última posição da fila está ocupada\r\n        print(\"\\n\\n\\t\\tNão é possível retirar mais senhas de momento\")\r\n        input()\r\n        return tickets\r\n    global senha\r\n    tickets.append(senha)\r\n    print(\"\\n\\n\\t\\tSaiu ticket nº {0}\".format(senha))\r\n    input()\r\n    senha += 1  # Próxima senha a sair\r\n    return tickets\r\n\r\n\r\ndef atendimento(tickets):\r\n    \"\"\"\r\n    Recebe a lista de tickets e realiza o atendimento.\r\n    \"\"\"\r\n    if len(tickets) == 0:\r\n        print(\"\\n\\n\\t\\tNão há senhas à espera de atendimento\")\r\n        input()\r\n        return\r\n    # Atende a senha que está na posição 0 da lista (mais à frente)\r\n    print(\"\\n\\n\\t\\tAtendimento Senha nº {}\".format(tickets[0]))\r\n    input()\r\n    tickets.pop(0)\r\n    return tickets\r\n\r\n\r\ndef atendimento_v2(tickets):\r\n    \"\"\"\r\n    Recebe a lista de tickets e implementa o atendimento, com reposicionamento das senhas.\r\n    \"\"\"\r\n    if len(tickets) == 0:\r\n        print(\"\\n\\n\\t\\tNão há senhas à espera de atendimento\")\r\n        input()\r\n        return\r\n    # Atende a senha que está na posição 0 da lista (mais à frente)\r\n    print(\"\\n\\n\\t\\tAtendimento Senha nº {}\".format(tickets[0]))\r\n    input()\r\n    i = 1\r\n    global comp_fila\r\n    while i != 0 and i < comp_fila:  # Para deslocar todas as senhas 1 posição à frente\r\n        tickets[i - 1] = tickets[i]\r\n        i += 1\r\n    tickets[comp_fila - 1] = 0\r\n    return tickets\r\n\r\n\r\ndef estado(tickets):\r\n    print(\"\\n\\n\\t\\tSenhas por atender {0}\".format(len(tickets)))\r\n    print(\"\\n\\n\\t\\tSenhas livres      {0}\".format(comp_fila - len(tickets)))\r\n    print(\"\\n\\t\\t\", tickets)\r\n    input()\r\n\r\n\r\ntickets = []\r\n\r\nop = \"1\"\r\nwhile op != '0':\r\n    os.system('cls')  # Limpar tela\r\n    print(\"\\n\\t\\t\\tMENU\\n\")\r\n    print(\"\\t\\t1- Tirar Ticket\")\r\n    print(\"\\t\\t2- Atendimento\")\r\n    print(\"\\t\\t3 - Estado da fila de espera\")\r\n    print(\"\\t\\t0 - Sair\")\r\n    op = input(\"\\t\\t    Opção: \")\r\n    if op == '1':\r\n        tickets = tirar_ticket(tickets)\r\n    if op == '2':\r\n        tickets = atendimento(tickets)\r\n    if op == '3':\r\n        estado(tickets)",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T12:56:18.119Z",
        "name": "Transposta",
        "tags": [
            "transposta"
        ],
        "content": "def invert(lista):\r\n    \"\"\"\r\n    Recebe uma lista bidimensional (matriz) e imprime a sua transposta    \r\n    \"\"\"\r\n    print(\"\\n\\nMatriz Original:\")\r\n    for i in range(len(lista)):  # Percorrer cada uma das sub-listas (LINHAS)\r\n        for j in range(len(lista[i])):\r\n            print(lista[i][j], end=\" \")  # Imprime posições de sub-lista (COLUNAS)\r\n        print()  # No final de uma sub-lista (LINHA), força um enter\r\n\r\n    print(\"\\n\\nMatriz Transposta:\")\r\n    for i in range(len(lista[0])):  # O número de colunas da matriz original define o número de linhas na transposta\r\n        for j in range(len(lista)):  # O número de linhas da matriz original define o número de colunas na transposta\r\n            print(lista[j][i], end=\" \")  # Matriz transposta consiste em trocar as linhas pelas colunas\r\n        print()\r\n\r\n\r\ndef cria_lista(n_linhas, n_colunas):\r\n    \"\"\" \r\n    Função que cria uma lista bidimensional com dimensão de n_linhas e n_colunas\r\n    \"\"\"\r\n    lista = []  # Inicializa lista\r\n    for i in range(n_linhas):  # Percorre as linhas (ou sub-listas)\r\n        lista.append([])  # Acrescenta uma lista vazia para cada linha\r\n        for j in range(n_colunas):  # Percorre as colunas de cada sub-lista\r\n            numero = int(input(\"Linha {0}, coluna {1} : \".format(i + 1, j + 1)))\r\n            lista[i].append(numero)  # Em cada linha, acrescenta uma coluna à lista\r\n    return lista\r\n\r\n\r\nlista = cria_lista(3, 3)  # Ler lista / matriz\r\ninvert(lista)  # Função que imprime a transposta",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T12:59:52.668Z",
        "name": "IMP - Menu",
        "tags": [
            "IMP",
            "menu"
        ],
        "content": "def menu():\n    while True:\n        print(\"\\nEscolha uma opção:\")\n        print(\"1 - Opção 1\")\n        print(\"2 - Opção 2\")\n        print(\"3 - Opção 3\")\n        print(\"0 - Sair\")\n        opcao = input(\"Digite a opção: \")\n        \n        if opcao == '1':\n            print(\"Opção 1 selecionada\")\n        elif opcao == '2':\n            print(\"Opção 2 selecionada\")\n        elif opcao == '3':\n            print(\"Opção 3 selecionada\")\n        elif opcao == '0':\n            print(\"Saindo...\")\n            break\n        else:\n            print(\"Opção inválida! Tente novamente.\")\n            \nmenu()",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T13:32:55.695Z",
        "name": "IMP - Nome e número para teste",
        "tags": [
            "nome e numero"
        ],
        "content": "# Número: 40240119\n# Nome: António Amorim",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T13:37:14.303Z",
        "name": "IMP - Abrir e ler um ficheiro",
        "tags": [
            "abrir e ler um ficheiro"
        ],
        "content": "# Abrir e ler um ficheiro\r\nwith open(file_path, 'r') as file:\r\n    conteudo = file.read()\r\n    print(conteudo)",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T13:38:13.206Z",
        "name": "IMP - Escrever num ficheiro",
        "tags": [
            "escrever"
        ],
        "content": "# Escrever em um ficheiro\nwith open(file_path, 'w') as file:\n    file.write(\"Texto a ser escrito no ficheiro.\")",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T13:39:27.779Z",
        "name": "IMP - Ler ficheiro linha por linha",
        "tags": [
            "ler"
        ],
        "content": "# Ler ficheiro linha por linha\nwith open(file_path, 'r') as file:\n    for linha in file:\n        print(linha.strip())  # strip() remove espaços extras e quebras de linha\n",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T13:41:03.108Z",
        "name": "IMP - Escrever várias linhas em um ficheiro",
        "tags": [
            "escrever várias linhas"
        ],
        "content": "# Escrever várias linhas em um ficheiro\nlinhas = [\"Linha 1\\n\", \"Linha 2\\n\", \"Linha 3\\n\"]\nwith open(file_path, 'w') as file:\n    file.writelines(linhas)\n",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T13:43:17.346Z",
        "name": "IMP - Try Except",
        "tags": [
            "try",
            "except"
        ],
        "content": "try:\r\n    numero = int(input(\"Digite um número: \"))\r\n    print(f\"Você digitou: {numero}\")\r\nexcept ValueError:\r\n    print(\"Erro: Valor inválido! Digite um número inteiro.\")\r\nexcept Exception as e:\r\n    print(f\"Ocorreu um erro: {e}\")\r\nelse:\r\n    print(\"Entrada válida!\")\r\n\r\n\"\"\" \r\nSyntaxError\r\nOcorre quando há um erro na sintaxe do código, como um parêntese não fechado.\r\n\r\nIndentationError\r\nAcontece quando a indentação do código não está correta, o que é essencial em Python.\r\n\r\nTypeError\r\nLevantada quando uma operação é realizada em um tipo de dado inadequado, como somar uma string com um inteiro.\r\n\r\nValueError\r\nOcorre quando um valor não tem o tipo esperado, como tentar converter uma string não numérica para um número.\r\n\r\nIndexError\r\nLevantada quando se tenta acessar um índice fora do alcance de uma lista ou sequência.\r\n\r\nKeyError\r\nOcorre quando se tenta acessar uma chave que não existe em um dicionário.\r\n\r\nFileNotFoundError\r\nLevantada quando um arquivo que você está tentando abrir não existe no caminho especificado.\r\n\r\nZeroDivisionError\r\nOcorre quando você tenta dividir um número por zero.\r\n\r\nAttributeError\r\nLevantada quando você tenta acessar um atributo ou método que não existe para um objeto.\r\n\r\nImportError\r\nOcorre quando não é possível importar um módulo ou um nome específico de um módulo.\r\n\"\"\"",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T13:45:11.304Z",
        "name": "Listas e Laços",
        "tags": [
            "listas",
            "laços"
        ],
        "content": "numeros = [1, 2, 3, 4, 5]\r\nfor numero in numeros:\r\n    print(f\"Número: {numero}\")",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T13:49:08.454Z",
        "name": "IMP - Criar dicionário e acessar",
        "tags": [
            "dicionario"
        ],
        "content": "# Criar dicionário e acessar elementos\r\npessoa = {'nome': 'João', 'idade': 30, 'cidade': 'Lisboa'}\r\nprint(pessoa['nome'])  # Saída: João\r\n",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T13:52:35.311Z",
        "name": "Enumerate",
        "tags": [
            "contar",
            "enumerate"
        ],
        "content": "nomes = [\"Ana\", \"Carlos\", \"João\"]\r\nfor indice, nome in enumerate(nomes):\r\n    print(f\"Índice: {indice}, Nome: {nome}\")",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T14:10:14.523Z",
        "name": "CTK - Base",
        "tags": [
            "Programa base ctk",
            "ctk"
        ],
        "content": "import customtkinter as ctk\n\n# Criar a aplicação (app)\napp = ctk.CTk()\n\n# Definir o título da janela\napp.title(\"Exemplo de Interface Gráfica\")\n\n# Iniciar o CustomTkinter\nctk.set_appearance_mode(\"light\")  # Modo claro ou escuro (Pode ser \"system\", \"dark\" e \"light\")\nctk.set_default_color_theme(\"blue\")  # Tema padrão (Pode ser \"blue\", \"dark-blue\" e \"green\")\n\n# Dimensões da interface da app\napp_width = 600\napp_height = 300\n\n# Definir o tamanho da janela usando as variáveis\napp.geometry(f\"{app_width}x{app_height}\")  # Largura x Altura\n\n\"\"\" \n# Obter as dimensões do meu screen (em pixeis)\nscreenWidth = app.winfo_screenwidth()\nscreenHeight = app.winfo_screenheight()\n# App centrada no screen, em função das suas dimensões# encontrar\nx = (screenWidth/2) - (app_width/2)\ny = (screenHeight/2) - (app_height/2)\napp.geometry(f'{app_width}x{app_height}+{int(x)}+{int(y)}')\n\"\"\"\n\n# Definir tamanho mínimo com as variáveis\napp.minsize(app_width, app_height)\n\n# Tornar a janela responsiva\napp.resizable(True, True)  # Permite redimensionar a janela\n\n# Iniciar o loop da interface gráfica\napp.mainloop()",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T14:23:46.905Z",
        "name": "CTK - Botão Responsivo",
        "tags": [
            "botão",
            "responsivo"
        ],
        "content": "# Função que será executada ao clicar no botão\r\ndef ao_clicar():\r\n    print(\"Botão clicado!\")\r\n\r\n# Criar o botão\r\nbotao = ctk.CTkButton(app, text=\"Clique-me\", command=ao_clicar)\r\nbotao.pack(pady=20, padx=20, fill=\"x\")  # Botão responsivo, preenche horizontalmente",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T14:25:11.182Z",
        "name": "CTK - Caixa de texto responsiva",
        "tags": [
            "caixa-texto"
        ],
        "content": "# Função para mostrar o texto digitado\r\ndef mostrar_texto():\r\n    texto = caixa_texto.get()\r\n    print(f\"Texto digitado: {texto}\")\r\n\r\n# Criar a caixa de texto\r\ncaixa_texto = ctk.CTkEntry(app, width=300)\r\ncaixa_texto.pack(pady=20, padx=20)\r\n\r\n# Criar o botão para mostrar o texto\r\nbotao = ctk.CTkButton(app, text=\"Mostrar Texto\", command=mostrar_texto)\r\nbotao.pack(pady=10)",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T14:27:29.406Z",
        "name": "CTK - Texto Responsivo (rotulo)",
        "tags": [
            "texto",
            "responsivo"
        ],
        "content": "# Criar o label\r\nrotulo = ctk.CTkLabel(app, text=\"Este é um rótulo responsivo!\", font=(\"Arial\", 20))\r\nrotulo.pack(pady=20, padx=20, fill=\"x\")  # O rótulo preenche horizontalmente",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T14:37:15.080Z",
        "name": "CTK - Frame Responsivo",
        "tags": [
            "frame",
            "responsivo",
            "ctk"
        ],
        "content": "import customtkinter as ctk\r\n\r\n# Função para alterar o texto do label\r\ndef alterar_texto():\r\n    texto_label.config(text=\"Texto Alterado!\")\r\n\r\n# Criar a aplicação\r\napp = ctk.CTk()\r\n\r\n# Definir o título da janela\r\napp.title(\"Exemplo de Frame Responsivo\")\r\napp.geometry(\"800x600\")\r\napp.resizable(True, True)\r\n\r\n# Criar um frame container\r\nframe = ctk.CTkFrame(app)\r\nframe.pack(padx=20, pady=20, fill=\"both\", expand=True)  # Preenche todo o espaço disponível\r\n\r\n# Criar um frame container\r\nframe2 = ctk.CTkFrame(app)\r\nframe2.pack(padx=20, pady=20, fill=\"both\", expand=True)  # Preenche todo o espaço disponível\r\n\r\n# Criar um frame container\r\nframe3 = ctk.CTkFrame(app)\r\nframe3.pack(padx=20, pady=20, fill=\"both\", expand=True)  # Preenche todo o espaço disponível\r\n\r\n# Criar um label dentro do frame\r\ntexto_label = ctk.CTkLabel(frame, text=\"Texto Inicial\", font=(\"Arial\", 16))\r\ntexto_label.pack(pady=20)\r\n\r\n# Criar um botão para alterar o texto\r\nbotao = ctk.CTkButton(frame2, text=\"Alterar Texto\", command=alterar_texto)\r\nbotao.pack(pady=20)\r\n\r\n# Iniciar o loop da interface gráfica\r\napp.mainloop()\r\n",
        "contentType": "python"
    },
    {
        "created": "2024-12-15T14:42:11.272Z",
        "name": "CTK - Layout Responsivo com Grid",
        "tags": [
            "responsivo",
            "layout"
        ],
        "content": "import customtkinter as ctk\n\n# Criar a aplicação\napp = ctk.CTk()\n\n# Definir o título da janela\napp.title(\"Layout Responsivo com Grid\")\napp.geometry(\"800x600\")\napp.resizable(True, True)\n\n# Criar widgets (botões, labels, etc.) e adicionar ao grid\n\n# Definir o comportamento das colunas e linhas (responsividade)\napp.grid_columnconfigure(0, weight=1, uniform=\"equal\")  # Coluna 0 vai se expandir\napp.grid_columnconfigure(1, weight=1, uniform=\"equal\")  # Coluna 1 vai se expandir\n\n# Criar labels e botões\nlabel1 = ctk.CTkLabel(app, text=\"Label 1\", font=(\"Arial\", 14))\nlabel1.grid(row=0, column=0, padx=10, pady=10, sticky=\"ew\")  # Expandir horizontalmente\n\nlabel2 = ctk.CTkLabel(app, text=\"Label 2\", font=(\"Arial\", 14))\nlabel2.grid(row=0, column=1, padx=10, pady=10, sticky=\"ew\")  # Expandir horizontalmente\n\nbotao1 = ctk.CTkButton(app, text=\"Botão 1\")\nbotao1.grid(row=1, column=0, padx=10, pady=10, sticky=\"ew\")  # Expandir horizontalmente\n\nbotao2 = ctk.CTkButton(app, text=\"Botão 2\")\nbotao2.grid(row=1, column=1, padx=10, pady=10, sticky=\"ew\")  # Expandir horizontalmente\n\n# Iniciar o loop da interface gráfica\napp.mainloop()",
        "contentType": "python"
    }
]